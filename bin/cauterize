#!/usr/bin/env ruby

LIB_PATH = File.dirname(__FILE__) + "/../lib"
C_PATH = File.dirname(__FILE__) + "/../c/src"
CS_PATH = File.dirname(__FILE__) + "/../cs/src"

$LOAD_PATH.unshift LIB_PATH

require 'thor'
require 'cauterize/cauterize'

class CmdLineException < Exception; end

class CauterizeCmdline < Thor
  desc "generate [language] [target_dir] [[description file]]",
       "Generate sources for [language] in [target_dir]."
  method_option :omit_support, :type => :boolean,
                               :desc => "Omit the support files needed by Cauterize",
                               :default => false
  method_option :force, :type => :boolean,
                        :desc => "Bravely overwrite files in non-empty directories",
                        :default => false
  def generate(language, target_dir, desc_file = nil)
    if not options[:force] and Dir.exist?(target_dir) and Dir[target_dir + "/*"].size > 0
      raise CmdLineException.new("Directory '#{target_dir}' isn't empty. Cowardly quitting.")
    end

    desc_file ||= "Cauterize"

    if not File.exist? desc_file
      raise CmdLineException.new("The description file #{desc_file} does not exist.")
    end

    case language.to_sym
    when :c
      # Generate the C files.
      Cauterize.generate_c(target_dir, desc_file)
      path = C_PATH
    when :cs
      raise CmdLineException.new("Unimplemented")
      path = CS_PATH
    else
      raise CmdLineException.new("Language '#{language}' is not supported.")
    end

    # Copy the cauterize support files.
    unless options[:omit_support]
      Dir[path + "/*"].each do |path|
        FileUtils.cp(path, target_dir)
      end
    end
  end
end

begin
  CauterizeCmdline.start
rescue CmdLineException => ex
  puts ex.message
end

# vim: set syntax=ruby ts=2 sw=2 et ai
